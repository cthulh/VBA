Option Explicit

Sub main_procedure()

Dim splitter() As String
Dim products(1 To 10000) As Variant, customers(1 To 1000, 1 To 2) As Variant, consolidated_cust(1 To 1000) As Variant
Dim counter As Long, lastrow As Long, x As Long
Dim tempval As Variant

Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual

' 1. Collect all product codes from sheet 6 extract and write data to sheet 5

With Sheet6
    ' Collecting all product codes from sheet 6
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    counter = 1
    ' Data extract starts from row 9
    For x = 9 To lastrow
        If Left(.Cells(x, 1).Value, 1) = "-" Then Exit For
        If Left(.Cells(x, 1).Value, 1) = "|" Then
            splitter = Split(.Cells(x, 1).Value, "|")
            If UBound(splitter) = 8 Then
                ' Product codes are stored in 6th column of a table delimited by a "|"
                products(counter) = Trim(splitter(6))
                counter = counter + 1
            End If
        End If
    Next x
End With

With Sheet5
    ' Writing all product codes to sheet 5, data entry starts from row 2
    counter = 2
    For x = 1 To UBound(products)
        If Not products(x) = Empty Then
            .Cells(counter, 3).Value = products(x)
            .Cells(counter, 2).Value = "CY10"
            
' 2. Generate random 3-digit code per product code ["check digit"]

get_another_random:
            tempval = get_random_cd
            If Application.CountIf(.Range(.Cells(1, 1), .Cells(counter, 6)), tempval) = 0 Then
                .Cells(counter, 6).Value = tempval
            Else
                GoTo get_another_random
            End If
            tempval = ""
            counter = counter + 1
        End If
    Next x
End With

' 3. Collect all customer and quantity data from sheets [2, 3, 4]

With Sheet2
    ' Collecting all customer data with
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    counter = 1
    ' Data extract starts from row 9
    For x = 9 To lastrow
        If Left(.Cells(x, 1).Value, 1) = "-" Then Exit For
        If Left(.Cells(x, 1).Value, 1) = "|" Then
            splitter = Split(.Cells(x, 1).Value, "|")
            If UBound(splitter) = 11 Then
                ' Customer codes are stored in 9th column of a table delimited by a "|"
                customers(counter, 1) = Trim(splitter(9))
                ' Qtuantities are stored in 10th column
                customers(counter, 2) = Trim(splitter(10))
                counter = counter + 1
            End If
        End If
    Next x
    If Application.CountA(.Range(.Cells(1, 2), .Cells(1000, 2))) = 0 Then
        .Cells.ClearContents
        For x = 1 To UBound(customers)
            .Cells(x, 1).Value = customers(x, 1)
            .Cells(x, 2).Value = customers(x, 2)
        Next x
    End If
    Erase customers
End With

With Sheet3
    ' Collecting all customer data with
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    counter = 1
    ' Data extract starts from row 9
    For x = 9 To lastrow
        If Left(.Cells(x, 1).Value, 1) = "-" Then Exit For
        If Left(.Cells(x, 1).Value, 1) = "|" Then
            splitter = Split(.Cells(x, 1).Value, "|")
            If UBound(splitter) = 11 Then
                ' Customer codes are stored in 9th column of a table delimited by a "|"
                customers(counter, 1) = Trim(splitter(9))
                ' Qtuantities are stored in 10th column
                customers(counter, 2) = Trim(splitter(10))
                counter = counter + 1
            End If
        End If
    Next x
    If Application.CountA(.Range(.Cells(1, 2), .Cells(1000, 2))) = 0 Then
        .Cells.ClearContents
        For x = 1 To UBound(customers)
            .Cells(x, 1).Value = customers(x, 1)
            .Cells(x, 2).Value = customers(x, 2)
        Next x
    End If
    Erase customers
End With

With Sheet4
    ' Collecting all customer data with
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    counter = 1
    ' Data extract starts from row 9
    For x = 9 To lastrow
        If Left(.Cells(x, 1).Value, 1) = "|" Then
            splitter = Split(.Cells(x, 1).Value, "|")
            If UBound(splitter) = 15 Then
                ' Ignore reoccurring column headers
                If Left(splitter(13), 4) <> "Unit" Then
                    ' Only process when there is a non-zero qty for ambient for the customer
                    If CDbl(splitter(13)) > 0 Then
                        ' Customer codes are stored in 1st column of a table delimited by a "|"
                        ' Further splitting due to a combined string of "account - customer name"
                        tempval = Trim(Mid(splitter(1), 1, InStr(splitter(1), "-") - 1))
                        customers(counter, 1) = tempval
                        ' Qtuantities are stored in 13th column
                        customers(counter, 2) = Trim(splitter(13))
                        counter = counter + 1
                    End If
                End If
            End If
        End If
    Next x
    If Application.CountA(.Range(.Cells(1, 2), .Cells(1000, 2))) = 0 Then
        .Cells.ClearContents
        For x = 1 To UBound(customers)
            .Cells(x, 1).Value = customers(x, 1)
            .Cells(x, 2).Value = customers(x, 2)
        Next x
    End If
    Erase customers
End With

Erase splitter
Erase products

' 4. Write consolidated data per customer to sheet 8

' Collect customer from sheet2
With Sheet2
    counter = 1
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    For x = 1 To lastrow
        consolidated_cust(counter) = .Cells(x, 1).Value
        counter = counter + 1
    Next x
End With

' Collect customer from sheet3
With Sheet3
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    For x = 1 To lastrow
        consolidated_cust(counter) = .Cells(x, 1).Value
        counter = counter + 1
    Next x
End With

' Collect customer from sheet4
With Sheet4
    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
    For x = 1 To lastrow
        consolidated_cust(counter) = .Cells(x, 1).Value
        counter = counter + 1
    Next x
End With

' Sort all account numbers ASC

tempval = BubbleSrt(consolidated_cust, True)

' Write all customers unique numbers from sorted array
With Sheet8
    .Range(.Cells(4, 3), .Cells(1000, 3)).ClearContents
    .Range(.Cells(4, 14), .Cells(1000, 18)).ClearContents
    counter = 1
    ' Report starts from row 3, column 2 is where we want out account numbers printed
    For x = 1 To UBound(consolidated_cust)
        If Not tempval(x) = Empty Then
            If Application.CountIf(.Range(.Cells(4, 3), .Cells(counter + 3, 3)), tempval(x)) = 0 Then
                .Cells(counter + 3, 3).Value = tempval(x)
                counter = counter + 1
            End If
        End If
    Next x
End With

Call sort_by_route
Sheet5.Activate
Application.ScreenUpdating = True
Application.Calculation = xlAutomatic

End Sub

Public Function get_random_cd() As String
    get_random_cd = CStr(CInt(9 * Rnd())) & " " & CStr(CInt(9 * Rnd())) & " " & CStr(CInt(9 * Rnd()))
End Function


Public Function BubbleSrt(ArrayIn, Ascending As Boolean)
' rjwebgraphix, 03/11/2013
' http://www.mrexcel.com/forum/excel-questions/690718-visual-basic-applications-sort-array-numbers.html
' True being sort as Ascending. False will sort Decending.
Dim SrtTemp As Variant
Dim i As Long
Dim j As Long
If Ascending = True Then
  For i = LBound(ArrayIn) To UBound(ArrayIn)
    For j = i + 1 To UBound(ArrayIn)
      If ArrayIn(i) > ArrayIn(j) Then
        SrtTemp = ArrayIn(j)
        ArrayIn(j) = ArrayIn(i)
        ArrayIn(i) = SrtTemp
      End If
    Next j
  Next i
Else
  For i = LBound(ArrayIn) To UBound(ArrayIn)
    For j = i + 1 To UBound(ArrayIn)
      If ArrayIn(i) < ArrayIn(j) Then
        SrtTemp = ArrayIn(j)
        ArrayIn(j) = ArrayIn(i)
        ArrayIn(i) = SrtTemp
      End If
    Next j
   Next i
End If
BubbleSrt = ArrayIn
End Function

Sub clearall()
    Cells.ClearContents
End Sub

Sub sort_by_route()

Dim lastrow As Long, x As Long
' Find first non-empty cell in column A

With Sheet8

    lastrow = .Cells(Rows.Count, 3).End(xlUp).Row
    If lastrow = 3 Then Exit Sub
    .Activate
    .Range("A4:R" & lastrow).Select
    ActiveWorkbook.Worksheets("MASTER SHEET").SORT.SortFields.Clear
    ActiveWorkbook.Worksheets("MASTER SHEET").SORT.SortFields.Add Key:=Range( _
        "A4:A" & lastrow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.Worksheets("MASTER SHEET").SORT
        .SetRange Range("A4:R" & lastrow)
        .Header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    .Range("A1").Select
End With

End Sub

Sub generate_labels()

Dim labels() As Variant
Dim counter As Long, arr_counter As Long, lastrow As Long, label_count As Integer, label_counter As Integer, x As Long

Application.ScreenUpdating = False
Application.Calculation = xlManual

' 1. Generate a pallet label entry per 75 units

With Sheet8
    ' Establish doc length
    lastrow = .Cells(Rows.Count, 3).End(xlUp).Row
    ' Set max dimentions of label counts equal to total customers * 5
    ' 4 columns: ROUTE / ACCOUNT / CUSTOMER
    ReDim labels(1 To lastrow * 5, 1 To 3) As Variant
    label_counter = 1
    ' Report starts from row 4
    For counter = 4 To lastrow
        ' Generate a label for each frozen calculated pallet
        label_count = Round((.Cells(counter, 7).Value + .Cells(counter, 5).Value + .Cells(counter, 6).Value) / 75, 0) + 1
        For x = 1 To label_count
            ' ROUTE
            labels(label_counter, 1) = .Cells(counter, 1).Value
            ' ACCOUNT
            labels(label_counter, 2) = .Cells(counter, 3).Value
            ' CUSTOMER NAME
            labels(label_counter, 3) = .Cells(counter, 4).Value
            ' NEXT LABEL NUMBER
            label_counter = label_counter + 1
        Next x
    Next counter
End With

'2. Print label entries to a list

With Sheet11
    ' Clear area for new data
    .Range(.Cells(1, 2), .Cells(1000, 5)).ClearContents
    
    For counter = 1 To UBound(labels, 1)
        If labels(counter, 1) = Empty Then Exit For
        ' ROUTE
        .Cells(counter, 2).Value = labels(counter, 1)
        ' ACCOUNT
        .Cells(counter, 3).Value = labels(counter, 2)
        ' CUSTOMER NAME
        .Cells(counter, 4).Value = labels(counter, 3)
    Next counter
    
End With

Call generate_random_pallet_tags
Call load_pallet_tags

Application.ScreenUpdating = True
Application.Calculation = xlAutomatic

End Sub

Sub print_labels()

Dim printable_last_row As Long, lastrow As Long
' 64 rows per label
printable_last_row = 64
On Error GoTo exiter
With Sheet11
    lastrow = .Cells(Rows.Count, 2).End(xlUp).Row
    printable_last_row = printable_last_row * lastrow
End With

With Sheet12
    .PageSetup.PrintArea = "$A$1:$J" & printable_last_row
    .PrintOut
End With
exiter:

End Sub

Sub generate_random_pallet_tags()

Dim rowcounter As Long, lastrow As Long, counter As Long, tempval As Variant

With Sheet11
    lastrow = .Cells(Rows.Count, 2).End(xlUp).Row
    For counter = 1 To lastrow
        If counter = 1 Then
            .Cells(counter, 5).Value = get_random_cd
        Else
            ' Generate random 3-digit pallet tag
get_another_random:
            tempval = get_random_cd
            If Application.CountIf(.Range(.Cells(1, 5), .Cells(counter, 5)), tempval) = 0 Then
                .Cells(counter, 5).Value = tempval
            Else
                GoTo get_another_random
            End If
            tempval = ""
        End If
    Next counter
End With

End Sub

Sub insert_page_breaks_and_print()

Dim lastrow As Long, tempval As Variant, counter As Long
On Error GoTo exiter
With Sheet8
    lastrow = .Cells(Rows.Count, 3).End(xlUp).Row
    ' Report starts from row 4, slip first row
    .ResetAllPageBreaks
    .PageSetup.PrintArea = ""
    For counter = 5 To lastrow
        If Left(.Cells(counter, 1).Value, 2) = Left(.Cells(counter - 1, 1).Value, 2) Then
            If Left(.Cells(counter, 1).Value, 2) = "RG" Then
                If .Cells(counter, 1).Value <> .Cells(counter - 1, 1).Value Then
                    .Rows(counter).PageBreak = xlPageBreakManual
                End If
            End If
        Else
            .Rows(counter).PageBreak = xlPageBreakManual
        End If
    Next counter
    .PageSetup.PrintArea = "$a$1:$R" & lastrow
    .PrintOut
End With
exiter:

End Sub

Sub clear_master()

With Sheet8
    .Range(.Cells(4, 3), .Cells(10000, 3)).ClearContents
    .Range(.Cells(4, 14), .Cells(1000, 18)).ClearContents
    .ResetAllPageBreaks
    .PageSetup.PrintArea = ""
End With

With Sheet11
    .Range(.Cells(1, 2), .Cells(10000, 5)).ClearContents
End With

End Sub

Sub print_grid_labels()

Dim lastrow As Long, printable_last_row As Long
On Error GoTo exiter
With Sheet5
    ' Labels consists of 39 rows
    printable_last_row = 39
    lastrow = .Cells(Rows.Count, 2).End(xlUp).Row
    printable_last_row = printable_last_row * lastrow
End With

With Sheet9
    .PageSetup.PrintArea = "$A$1:$K" & printable_last_row
    .PrintOut
End With
exiter:

End Sub

Sub ClearTextToColumns()
'Source: http://spreadsheetpage.com/index.php/tip/clearing_the_text_to_columns_parameters/
    On Error Resume Next
    If IsEmpty(Range("A1")) Then Range("A1") = "XYZZY"
    Range("A1").TextToColumns Destination:=Range("A1"), _
        DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, _
        ConsecutiveDelimiter:=False, _
        Tab:=False, _
        Semicolon:=False, _
        Comma:=False, _
        Space:=False, _
        Other:=False, _
        OtherChar:=""
    If Range("A1") = "XYZZY" Then Range("A1") = ""
    If Err.Number <> 0 Then MsgBox Err.Description
End Sub

Sub load_pallet_tags()

Dim p_tags() As Variant
Dim counter As Long, arr_col As Long, arr_row As Long, lastrow As Long

' 1. Collect pallet tags per customer
With Sheet11
    lastrow = .Cells(Rows.Count, 2).End(xlUp).Row
    ' Redimention table to (lastrow + 1) x 10, even tough we are only using 5 pallet tags atm
    ReDim p_tags(1 To lastrow + 1, 1 To 10)
    arr_row = 1
    ' Default column for pallet tags = 2 ( 1 = cust name)
    arr_col = 2
    For counter = 1 To lastrow
        If counter = 1 Then
            ' Customer account number
            p_tags(arr_row, 1) = .Cells(counter, 3).Value
            ' Pallet tag
            p_tags(arr_row, arr_col) = .Cells(counter, 5).Value
            
        Else
            ' If it's second entry for the same account, collect their second tag in the same row in p_tags array
            If .Cells(counter, 3).Value = .Cells(counter - 1, 3).Value Then
                arr_col = arr_col + 1
                p_tags(arr_row, arr_col) = .Cells(counter, 5).Value
            ' If it's a new account, go down 1 row in the array and collect new customer pallet tag
            Else
                arr_row = arr_row + 1
                ' Pallet tag column defaults back to 2
                arr_col = 2
                ' Customer account number
                p_tags(arr_row, 1) = .Cells(counter, 3).Value
                ' Pallet tag
                p_tags(arr_row, arr_col) = .Cells(counter, 5).Value
            End If
        End If
    Next counter
End With

' 2. Write pallet tags onto Master Sheet

With Sheet8
    lastrow = .Cells(Rows.Count, 3).End(xlUp).Row
    For counter = 1 To lastrow
        For arr_row = 1 To UBound(p_tags, 1)
            If .Cells(counter, 3).Value = p_tags(arr_row, 1) Then
                For arr_col = 2 To 6
                    .Cells(counter, 12 + arr_col).Value = p_tags(arr_row, arr_col)
                Next arr_col
                Exit For
            End If
        Next arr_row
    Next counter
End With

End Sub

Sub print_labels_and_master_sheet()

Call insert_page_breaks_and_print
Call print_labels

End Sub
